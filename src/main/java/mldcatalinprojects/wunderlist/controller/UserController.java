package mldcatalinprojects.wunderlist.controller;

import mldcatalinprojects.wunderlist.model.UserDTO;
import mldcatalinprojects.wunderlist.repository.UserRepository;
import mldcatalinprojects.wunderlist.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class UserController {
    
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    
    @PostMapping (consumes = "application/json")// Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody UserDTO newUser
            , HttpServletResponse response) throws IOException {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        
        if (newUser.getName() == null || newUser.getEmail() == null){
            response.sendError(422, "Missing 'name' and/or 'email' entity from request");
            return "Request not fulfilled";
        }
        User user = new User();
        user.setName(newUser.getName());
        user.setEmail(newUser.getEmail());
        userRepository.save(user);
        return "Saved User with name: " + newUser.getName() + " and Email: " + newUser.getEmail();
    }
    
    @GetMapping
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}
